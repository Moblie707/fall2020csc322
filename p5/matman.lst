     1                                  ; Will Baglivio
     2                                  ; Matrix Management
     3                                  ; 10/6/20
     4                                  ; Sums the rows and columns of an arbitrary matrix
     5                                  ; Also takes the grand total
     6                                  
     7                                  ;;;;;;;;;;;;;;;;;;;; TEST CASE 2 ;;;;;;;;;;;;;;;;;;;;;;;
     8                                  
     9                                  ROWS:	EQU 5
    10                                  COLS:	EQU 7
    11                                  
    12                                  SECTION .data
    13 00000000 010000000200000003-     MyMatrix: dd	 1,  2,  3,  4,  5,  6,  7
    14 00000009 000000040000000500-
    15 00000012 000006000000070000-
    16 0000001B 00                 
    17 0000001C 08000000090000000A-     	  dd	 8,  9, 10, 11, 12, 13, 14
    18 00000025 0000000B0000000C00-
    19 0000002E 00000D0000000E0000-
    20 00000037 00                 
    21 00000038 0F0000001000000011-     	  dd	15, 16, 17, 18, 19, 20, 21
    22 00000041 000000120000001300-
    23 0000004A 000014000000150000-
    24 00000053 00                 
    25 00000054 160000001700000018-     	  dd	22, 23, 24, 25, 26, 27, 28
    26 0000005D 000000190000001A00-
    27 00000066 00001B0000001C0000-
    28 0000006F 00                 
    29 00000070 1D0000001E0000001F-     	  dd	29, 30, 31, 32, 33, 34, 35
    30 00000079 000000200000002100-
    31 00000082 000022000000230000-
    32 0000008B 00                 
    33                                  
    34                                  SECTION .bss
    35 00000000 <res 00000014>          RowSums:	RESD ROWS
    36 00000014 <res 0000001C>          ColSums:	RESD COLS
    37 00000030 <res 00000004>          Sum:		RESD 1
    38 00000034 <res 00000004>          Save:		RESD 1
    39 00000038 <res 00000004>          Save2:		RESD 1
    40 0000003C <res 00000004>          ColDist:	RESD 1
    41                                  
    42                                  SECTION .text
    43                                  global _main
    44                                  _main:
    45                                  
    46                                  ; Obtain distance for column traversal
    47 00000000 B907000000              mov ecx, COLS
    48 00000005 B800000000              mov eax, 0
    49                                  myloop:
    50 0000000A 83C004                  	add eax, 4
    51 0000000D E2FB                    loop myloop
    52 0000000F A3[3C000000]            mov [ColDist], eax
    53                                  
    54                                  ; Calculate row sums first
    55 00000014 B905000000              mov ecx, ROWS
    56 00000019 BB[00000000]            mov ebx, MyMatrix
    57 0000001E BA[00000000]            mov edx, RowSums
    58                                  outer:
    59 00000023 890D[34000000]          	mov [Save], ecx
    60 00000029 B907000000              	mov ecx, COLS
    61 0000002E B800000000              	mov eax, 0
    62                                  	inner:
    63 00000033 0303                    		add eax, [ebx]
    64 00000035 83C304                  		add ebx, 4
    65 00000038 E2F9                    	loop inner
    66 0000003A 8902                    	mov [edx], eax
    67 0000003C 83C204                  	add edx, 4
    68 0000003F 8B0D[34000000]          	mov ecx, [Save]
    69 00000045 E2DC                    loop outer
    70                                  
    71                                  ; Calculate column sums next
    72 00000047 B907000000              mov ecx, COLS
    73 0000004C BB[00000000]            mov ebx, MyMatrix
    74 00000051 BA[14000000]            mov edx, ColSums
    75                                  outer2:
    76 00000056 890D[34000000]          	mov [Save], ecx
    77 0000005C 891D[38000000]          	mov [Save2], ebx
    78 00000062 B905000000              	mov ecx, ROWS
    79 00000067 B800000000              	mov eax, 0
    80                                  	inner2:
    81 0000006C 0303                    		add eax, [ebx]
    82 0000006E 031D[3C000000]          		add ebx, [ColDist]
    83 00000074 E2F6                    	loop inner2
    84 00000076 8902                    	mov [edx], eax
    85 00000078 83C204                  	add edx, 4
    86 0000007B 8B0D[34000000]          	mov ecx, [Save]
    87 00000081 8B1D[38000000]          	mov ebx, [Save2]
    88 00000087 83C304                  	add ebx, 4
    89 0000008A E2CA                    loop outer2
    90                                  
    91                                  ; Finally, calculate grandTotal
    92 0000008C B905000000              mov ecx, ROWS
    93 00000091 BB[00000000]            mov ebx, MyMatrix
    94 00000096 B800000000              mov eax, 0
    95                                  outer3:
    96 0000009B 890D[34000000]          	mov [Save], ecx
    97 000000A1 B907000000              	mov ecx, COLS
    98                                  	inner3:
    99 000000A6 0303                    		add eax, [ebx]
   100 000000A8 83C304                  		add ebx, 4
   101 000000AB E2F9                    	loop inner3
   102 000000AD 8B0D[34000000]          	mov ecx, [Save]
   103 000000B3 E2E6                    loop outer3
   104 000000B5 A3[30000000]            mov [Sum], eax
   105                                  
   106                                  lastBreak:
   107                                  
   108                                  ; Normal termination code
   109 000000BA B801000000              mov eax, 1
   110 000000BF BB00000000              mov ebx, 0
   111 000000C4 CD80                    int 80h
