     1                                  ; Will Baglivio
     2                                  ; 11/13/20
     3                                  ; CSC 323
     4                                  ; The Message Wanderer:
     5                                  ; This program lets a message wander like a snake in a confined screen.
     6                                  ; This code has been adapted from Dr. Allen's cycle.asm
     7                                  
     8                                  ;;; Define Structure for character on screen
     9                                  STRUC mStruct
    10 00000000 <res 00000002>          		RESB 2  ;;; space for <esc>[
    11 00000002 <res 00000002>          	.row:	RESB 2  ;;; two digit number (characters)
    12 00000004 <res 00000001>          		RESB 1  ;;; space for ;
    13 00000005 <res 00000002>          	.col:	RESB 2  ;;; two digit number (characters)
    14 00000007 <res 00000001>          		RESB 1  ;;; space for the H
    15 00000008 <res 00000001>          	.char:	RESB 1  ;;; space for THE character
    16                                  	.size:
    17                                  ENDSTRUC
    18                                  
    19                                  ;;; Calls itoa function
    20                                  ;;; Params(al has integer to convert, ebx has address of empty string)
    21                                  %macro callItoa 2
    22                                          pusha
    23                                          mov al, %1
    24                                          mov ebx, %2
    25                                  %%ybreak:
    26                                          call _itoa
    27                                  %%zbreak:
    28                                          popa
    29                                  %endmacro
    30                                  
    31                                  ;;; Prints a character
    32                                  ;;; Params (address of char)
    33                                  %macro printchar 1
    34                                  	pusha
    35                                  	mov eax, 4
    36                                  	mov ebx, 1
    37                                  	mov ecx, %1
    38                                  	mov edx, 9	;;; A character has 9 bytes
    39                                  	int 80h
    40                                  	popa
    41                                  %endmacro
    42                                  
    43                                  SECTION .data
    44                                  ; clear screen string
    45 00000000 1B5B324A                cls:		db 1bh,'[2J'
    46                                  
    47                                  ; Set cursor position control characters
    48 00000004 1B5B                    pos     db      1bh, '['
    49 00000006 3030                    row     db      '00'
    50 00000008 3B                              db      ';'
    51 00000009 3030                    col     db      '00'
    52 0000000B 48                              db      'H'
    53                                  
    54                                  ; Create an array of structs: formatted like the print interrupt uses.
    55 0000000C 1B5B31303B32394820      message:	db 1bh,'[10;29H '
    56 00000015 1B5B31303B32384821      		db 1bh,'[10;28H!'
    57 0000001E 1B5B31303B32374821      		db 1bh,'[10;27H!'
    58 00000027 1B5B31303B32364873      		db 1bh,'[10;26Hs'
    59 00000030 1B5B31303B32354864      		db 1bh,'[10;25Hd'
    60 00000039 1B5B31303B3234486C      		db 1bh,'[10;24Hl'
    61 00000042 1B5B31303B32334872      		db 1bh,'[10;23Hr'
    62 0000004B 1B5B31303B3232486F      		db 1bh,'[10;22Ho'
    63 00000054 1B5B31303B32314857      		db 1bh,'[10;21HW'
    64 0000005D 1B5B31303B32304820      		db 1bh,'[10;20H '
    65 00000066 1B5B31303B3139486F      		db 1bh,'[10;19Ho'
    66 0000006F 1B5B31303B3138486C      		db 1bh,'[10;18Hl'
    67 00000078 1B5B31303B3137486C      		db 1bh,'[10;17Hl'
    68 00000081 1B5B31303B31364865      		db 1bh,'[10;16He'
    69 0000008A 1B5B31303B31354848      		db 1bh,'[10;15HH'
    70                                  LEN: EQU 135
    71                                  messagelen: EQU 15
    72                                  
    73 00000093 0A                      firstrow: db 10
    74 00000094 0F                      firstcol: db 15
    75                                  
    76                                  ;;; Boundary character
    77 00000095 1B5B30313B3430482A      community:	db 1bh,'[01;40H*'
    78                                  
    79                                  ;;; Boundary defined by community
    80                                  MINROW: EQU 1
    81                                  MAXROW: EQU 20
    82                                  MINCOL: EQU 1
    83                                  MAXCOL: EQU 40
    84                                  
    85                                  SECTION .bss
    86 00000000 <res 00000002>          emptystr:	RESB 2
    87 00000002 <res 00000001>          deltarow:	RESB 1
    88 00000003 <res 00000001>          deltacol:	RESB 1
    89                                  
    90                                  SECTION .text
    91                                  global _main, _clrscr, _itoa, _crcomm, _displayMessage, _adjustMessage, _pause, _setCursor
    92                                  _main:
    93 00000000 E82B000000              	call _clrscr	;;; Clears screen
    94 00000005 E850000000              	call _crcomm	;;; Creates community
    95                                  
    96                                  	infty:
    97 0000000A E8CB020000              		call _displayMessage
    98 0000000F E83A030000              		call _pause
    99 00000014 E856010000              		call _adjustMessage
   100 00000019 EBEF                    		jmp infty
   101                                  
   102 0000001B B419                    	mov ah, 25
   103 0000001D B001                    	mov al, 1
   104 0000001F E8DF020000              	call _setCursor
   105                                  
   106                                  ; Demonstrate an infinite loop calling  functions which uses an array of structs
   107                                  
   108                                  ;top1: 	call	_displayMessage
   109                                  ;	call	_pause
   110                                  ;	call	_adjustMessage
   111                                  ;	jmp	top1
   112                                  
   113                                  
   114                                  
   115                                  ; Normal termination code
   116 00000024 B801000000              mov eax, 1
   117 00000029 BB00000000              mov ebx, 0
   118 0000002E CD80                    int 80h
   119                                  
   120                                  ;;; Clears screen
   121                                  _clrscr:
   122 00000030 60                              pusha
   123                                  
   124 00000031 B804000000                      mov eax, 4
   125 00000036 BB01000000                      mov ebx, 1
   126 0000003B B9[00000000]                    mov ecx, cls
   127 00000040 BA04000000                      mov edx, 4
   128 00000045 CD80                            int 80h
   129                                  
   130 00000047 61                              popa
   131 00000048 C3                              ret
   132                                  
   133                                  ;;; Converts integer into string
   134                                  ;;; al has number (0 <= x < 100)
   135                                  ;;; ebx has address of string for storage
   136                                  _itoa:
   137 00000049 60                              pusha
   138 0000004A 30E4                    	xor 	ah,ah
   139 0000004C B10A                            mov     cl,10
   140 0000004E F6F1                            div     cl
   141 00000050 80C430                          add     ah,'0'
   142 00000053 0430                            add     al,'0'
   143 00000055 668903                          mov     [ebx],ax
   144 00000058 61                              popa
   145 00000059 C3                              ret
   146                                  
   147                                  ;;; Creates community
   148                                  _crcomm:
   149 0000005A 60                      	pusha
   150                                  	
   151                                  	;;; First prints top boundary
   152 0000005B B928000000              	mov ecx, MAXCOL
   153                                  	
   154                                  	top:
   155 00000060 51                      		push ecx
   156 00000061 49                      		dec ecx
   157                                  		printchar community				;;; Prints boundary character
   158 00000062 60                  <1>  pusha
   159 00000063 B804000000          <1>  mov eax, 4
   160 00000068 BB01000000          <1>  mov ebx, 1
   161 0000006D B9[95000000]        <1>  mov ecx, %1
   162 00000072 BA09000000          <1>  mov edx, 9
   163 00000077 CD80                <1>  int 80h
   164 00000079 61                  <1>  popa
   165                                  		callItoa cl, emptystr				;;; Convert current col to chars
   166 0000007A 60                  <1>  pusha
   167 0000007B 88C8                <1>  mov al, %1
   168 0000007D BB[00000000]        <1>  mov ebx, %2
   169                              <1> %%ybreak:
   170 00000082 E8C2FFFFFF          <1>  call _itoa
   171                              <1> %%zbreak:
   172 00000087 61                  <1>  popa
   173 00000088 668B1D[00000000]        		mov bx, [emptystr]
   174 0000008F 881D[9A000000]          		mov BYTE [community + mStruct.col], bl		;;; Moves one column to the left
   175 00000095 883D[9B000000]          		mov BYTE [community + mStruct.col + 1], bh
   176 0000009B 59                      		pop ecx
   177 0000009C E2C2                    		loop top
   178                                  
   179                                  	;;; Next, prints left boundary
   180 0000009E B901000000              	mov ecx, 1
   181                                  
   182                                  	left:
   183 000000A3 83F914                  		cmp ecx, MAXROW					;;; Iterate over rows 1 <= x <= 20
   184 000000A6 7F3C                    		jg endleft
   185                                  
   186                                  		callItoa cl, emptystr				;;; Convert current row to chars
   187 000000A8 60                  <1>  pusha
   188 000000A9 88C8                <1>  mov al, %1
   189 000000AB BB[00000000]        <1>  mov ebx, %2
   190                              <1> %%ybreak:
   191 000000B0 E894FFFFFF          <1>  call _itoa
   192                              <1> %%zbreak:
   193 000000B5 61                  <1>  popa
   194 000000B6 668B1D[00000000]        		mov bx, [emptystr]
   195 000000BD 881D[97000000]          		mov BYTE[community + mStruct.row], bl		;;; Moves one row down
   196 000000C3 883D[98000000]          		mov BYTE[community + mStruct.row + 1], bh
   197                                  		printchar community				;;; Prints boundary character
   198 000000C9 60                  <1>  pusha
   199 000000CA B804000000          <1>  mov eax, 4
   200 000000CF BB01000000          <1>  mov ebx, 1
   201 000000D4 B9[95000000]        <1>  mov ecx, %1
   202 000000D9 BA09000000          <1>  mov edx, 9
   203 000000DE CD80                <1>  int 80h
   204 000000E0 61                  <1>  popa
   205                                  
   206 000000E1 41                      		inc ecx
   207 000000E2 EBBF                    		jmp left
   208                                  	endleft:
   209                                  
   210                                  	;;; Next, prints bottom boundary
   211 000000E4 B901000000              	mov ecx, 1
   212                                  
   213                                  	bottom:
   214 000000E9 83F928                  		cmp ecx, MAXCOL					;;; Iterate over cols 1 <= x <= 40
   215 000000EC 7F3C                    		jg endbottom
   216                                  
   217                                  		callItoa cl, emptystr				;;; Convert current col to chars
   218 000000EE 60                  <1>  pusha
   219 000000EF 88C8                <1>  mov al, %1
   220 000000F1 BB[00000000]        <1>  mov ebx, %2
   221                              <1> %%ybreak:
   222 000000F6 E84EFFFFFF          <1>  call _itoa
   223                              <1> %%zbreak:
   224 000000FB 61                  <1>  popa
   225 000000FC 668B1D[00000000]        		mov bx, [emptystr]
   226 00000103 881D[9A000000]          		mov BYTE[community + mStruct.col], bl		;;; Moves one col to the right
   227 00000109 883D[9B000000]          		mov BYTE[community + mStruct.col + 1], bh
   228                                  		printchar community				;;; Prints boundary character
   229 0000010F 60                  <1>  pusha
   230 00000110 B804000000          <1>  mov eax, 4
   231 00000115 BB01000000          <1>  mov ebx, 1
   232 0000011A B9[95000000]        <1>  mov ecx, %1
   233 0000011F BA09000000          <1>  mov edx, 9
   234 00000124 CD80                <1>  int 80h
   235 00000126 61                  <1>  popa
   236                                  		
   237 00000127 41                      		inc ecx
   238 00000128 EBBF                    		jmp bottom
   239                                  	endbottom:
   240                                  
   241                                  	;;; Finally, prints right boundary
   242 0000012A B914000000              	mov ecx, MAXROW
   243                                  
   244                                  	right:
   245 0000012F 51                      		push ecx
   246 00000130 49                      		dec ecx
   247                                  		printchar community				;;; Prints boundary character
   248 00000131 60                  <1>  pusha
   249 00000132 B804000000          <1>  mov eax, 4
   250 00000137 BB01000000          <1>  mov ebx, 1
   251 0000013C B9[95000000]        <1>  mov ecx, %1
   252 00000141 BA09000000          <1>  mov edx, 9
   253 00000146 CD80                <1>  int 80h
   254 00000148 61                  <1>  popa
   255                                  		callItoa cl, emptystr				;;; Convert current row to chars
   256 00000149 60                  <1>  pusha
   257 0000014A 88C8                <1>  mov al, %1
   258 0000014C BB[00000000]        <1>  mov ebx, %2
   259                              <1> %%ybreak:
   260 00000151 E8F3FEFFFF          <1>  call _itoa
   261                              <1> %%zbreak:
   262 00000156 61                  <1>  popa
   263 00000157 668B1D[00000000]        		mov bx, [emptystr]
   264 0000015E 881D[97000000]          		mov BYTE[community + mStruct.row], bl		;;; Moves one row up
   265 00000164 883D[98000000]          		mov BYTE[community + mStruct.row + 1], bh
   266 0000016A 59                      		pop ecx
   267 0000016B E2C2                    		loop right
   268                                  
   269 0000016D 61                      	popa
   270 0000016E C3                      	ret
   271                                  
   272                                  ;;; Function that shifts the rows/cols of the characters through the array of structs, and randomly
   273                                  ;;; chooses new position for first character (+- 1 to row and/or col)
   274                                  _adjustMessage:	
   275 0000016F 60                      	pusha
   276                                  
   277 00000170 BB[0C000000]            	mov ebx, message	;;; Pointer into array, starting at last character
   278 00000175 B90F000000              	mov ecx, messagelen	;;; Iterate over n-1 characters
   279 0000017A 49                      	dec ecx
   280                                  
   281                                  	amTop:
   282 0000017B 668B430B                		mov ax, [ebx + mStruct.size + mStruct.row]	;;; Get row of next character
   283 0000017F 668B530E                		mov dx, [ebx + mStruct.size + mStruct.col]	;;; get col of next character
   284                                  
   285 00000183 66894302                		mov [ebx + mStruct.row], ax			;;; Move next row to current row
   286 00000187 66895305                		mov [ebx + mStruct.col], dx			;;; Move next col to current col
   287                                  
   288 0000018B 83C309                  		add ebx, mStruct.size				;;; Move to next character
   289 0000018E E2EB                    		loop amTop
   290                                  mybreak:
   291 00000190 0F31                    	rdtsc
   292 00000192 83E007                          and eax, 111b	;;; Choose a random number between 0 and 7, inclusive
   293                                  
   294                                  	;;; Decide where to move first character based on al register
   295 00000195 83F800                  	cmp eax, 0		;;; Rng == 0
   296 00000198 7513                    	jne next1
   297 0000019A C605[02000000]FF        	mov BYTE [deltarow], -1
   298 000001A1 C605[03000000]00        	mov BYTE [deltacol], 0
   299 000001A8 E991000000              	jmp endrng
   300                                  
   301                                  	next1:
   302 000001AD 83F801                  	cmp eax, 1		;;; Rng == 1
   303 000001B0 7510                    	jne next2
   304 000001B2 C605[02000000]FF        	mov BYTE [deltarow], -1
   305 000001B9 C605[03000000]01        	mov BYTE [deltacol], 1
   306 000001C0 EB7C                    	jmp endrng
   307                                  	
   308                                  	next2:
   309 000001C2 83F802                  	cmp eax, 2		;;; Rng == 2
   310 000001C5 7510                    	jne next3
   311 000001C7 C605[02000000]00        	mov BYTE [deltarow], 0
   312 000001CE C605[03000000]01        	mov BYTE [deltacol], 1
   313 000001D5 EB67                    	jmp endrng
   314                                  
   315                                  	next3:
   316 000001D7 83F803                  	cmp eax, 3		;;; Rng == 3
   317 000001DA 7510                    	jne next4
   318 000001DC C605[02000000]01        	mov BYTE [deltarow], 1
   319 000001E3 C605[03000000]01        	mov BYTE [deltacol], 1
   320 000001EA EB52                    	jmp endrng
   321                                  
   322                                  	next4:
   323 000001EC 83F804                  	cmp eax, 4		;;; Rng == 4
   324 000001EF 7510                    	jne next5
   325 000001F1 C605[02000000]01        	mov BYTE [deltarow], 1
   326 000001F8 C605[03000000]00        	mov BYTE [deltacol], 0
   327 000001FF EB3D                    	jmp endrng
   328                                  
   329                                  	next5:
   330 00000201 83F805                  	cmp eax, 5		;;; Rng == 5
   331 00000204 7510                    	jne next6
   332 00000206 C605[02000000]01        	mov BYTE [deltarow], 1
   333 0000020D C605[03000000]FF        	mov BYTE [deltacol], -1
   334 00000214 EB28                    	jmp endrng
   335                                  
   336                                  	next6:
   337 00000216 83F806                  	cmp eax, 6		;;; Rng == 6
   338 00000219 7510                    	jne next7
   339 0000021B C605[02000000]00        	mov BYTE [deltarow], 0
   340 00000222 C605[03000000]FF        	mov BYTE [deltacol], -1
   341 00000229 EB13                    	jmp endrng
   342                                  
   343                                  	next7:
   344 0000022B 83F807                  	cmp eax, 7		;;; Rng == 7
   345 0000022E 750E                    	jne endrng
   346 00000230 C605[02000000]FF        	mov BYTE [deltarow], -1
   347 00000237 C605[03000000]FF        	mov BYTE [deltacol], -1
   348                                  
   349                                  	endrng:
   350 0000023E C605[02000000]FF        	mov BYTE [deltarow], -1
   351 00000245 C605[03000000]FF        	mov BYTE [deltacol], -1
   352                                  
   353                                  	;;; Adjust row/col by appropriate amount
   354 0000024C A0[02000000]            	mov al, [deltarow]
   355 00000251 8A15[03000000]          	mov dl, [deltacol]
   356 00000257 0005[93000000]          	add [firstrow], al	;;; Change 1st char row by deltarow
   357 0000025D 0015[94000000]          	add [firstcol], dl	;;; Change 1st char col by deltacol
   358                                  
   359                                  	;;; Final check to make sure no boundaries are crossed
   360 00000263 A0[93000000]            	mov al, [firstrow]
   361 00000268 8A15[94000000]          	mov dl, [firstcol]
   362                                  
   363                                  	;;; Top boundary check
   364 0000026E 3C01                    	cmp al, 1
   365 00000270 7F07                    	jg botbound
   366 00000272 C605[93000000]13        	mov BYTE [firstrow], 19
   367                                  
   368                                  	;;; Bottom boundary check
   369                                  	botbound:
   370 00000279 3C14                    	cmp al, MAXROW
   371 0000027B 7C07                    	jl leftbound
   372 0000027D C605[93000000]02        	mov BYTE [firstrow], 2
   373                                  
   374                                  	;;; Left boundary check
   375                                  	leftbound:
   376 00000284 80FA01                  	cmp dl, 1
   377 00000287 7F07                    	jg rightbound
   378 00000289 C605[94000000]27        	mov BYTE [firstcol], 39
   379                                  
   380                                  	;;; Right boundary check
   381                                  	rightbound:
   382 00000290 80FA28                  	cmp dl, MAXCOL
   383 00000293 7C07                    	jl endbound
   384 00000295 C605[94000000]02        	mov BYTE [firstcol], 2
   385                                  
   386                                  	endbound:
   387                                  
   388                                  	;;; Now adjust first character row/col
   389                                  nubreak1:
   390                                  	callItoa [firstrow], emptystr
   391 0000029C 60                  <1>  pusha
   392 0000029D A0[93000000]        <1>  mov al, %1
   393 000002A2 BB[00000000]        <1>  mov ebx, %2
   394                              <1> %%ybreak:
   395 000002A7 E89DFDFFFF          <1>  call _itoa
   396                              <1> %%zbreak:
   397 000002AC 61                  <1>  popa
   398 000002AD 668B0D[00000000]        	mov cx, [emptystr]
   399 000002B4 884B02                  	mov [ebx + mStruct.row], cl
   400 000002B7 886B03                  	mov [ebx + mStruct.row + 1], ch
   401                                  nubreak2:
   402                                  	callItoa [firstcol], emptystr
   403 000002BA 60                  <1>  pusha
   404 000002BB A0[94000000]        <1>  mov al, %1
   405 000002C0 BB[00000000]        <1>  mov ebx, %2
   406                              <1> %%ybreak:
   407 000002C5 E87FFDFFFF          <1>  call _itoa
   408                              <1> %%zbreak:
   409 000002CA 61                  <1>  popa
   410 000002CB 668B0D[00000000]        	mov cx, [emptystr]
   411 000002D2 884B05                  	mov [ebx + mStruct.col], cl
   412 000002D5 886B06                  	mov [ebx + mStruct.col + 1], ch
   413                                  
   414 000002D8 61                      	popa
   415 000002D9 C3                      	ret
   416                                  
   417                                  
   418                                  ;;;;;;;;;;;   Function to print the array of structs of message
   419                                  _displayMessage:
   420 000002DA 60                      	pusha
   421 000002DB BB[0C000000]            	mov	ebx,message
   422 000002E0 B90F000000              	mov	ecx,messagelen
   423                                  
   424 000002E5 51                      _dmTop:	push	ecx
   425 000002E6 53                      	push	ebx
   426 000002E7 B804000000              	mov	eax,4  ; system print
   427 000002EC 89D9                    	mov	ecx,ebx ; points to string to print
   428 000002EE BB01000000              	mov	ebx,1   ; standard out
   429 000002F3 BA09000000              	mov	edx,9   ; num chars to print
   430 000002F8 CD80                    	int	80h
   431                                  
   432 000002FA 5B                      	pop	ebx
   433 000002FB 83C309                  	add	ebx,mStruct.size
   434 000002FE 59                      	pop	ecx
   435 000002FF E2E4                    	loop	_dmTop
   436 00000301 61                      	popa
   437 00000302 C3                      	ret
   438                                  
   439                                  ;. _setcursor expects AH = row, AL = col
   440                                  _setCursor:
   441 00000303 60                              pusha
   442                                          ;;; save original to get col later
   443 00000304 50                              push    eax
   444                                          ;;;;;; process row
   445 00000305 66C1E808                        shr     ax,8    ;; shift row to right
   446 00000309 B30A                            mov     bl,10
   447 0000030B F6F3                            div     bl      ;; puts ax/10 in al, remainder in ah
   448 0000030D 80C430                          add     ah,'0'
   449 00000310 0430                            add     al,'0'
   450 00000312 A2[06000000]                    mov     BYTE [row],al
   451 00000317 8825[07000000]                  mov     BYTE [row+1],ah
   452                                          ;;;; process col
   453 0000031D 58                              pop     eax     ;; restore original parms
   454 0000031E 6625FF00                        and     ax,0FFh ;; erase row, leave col
   455 00000322 B30A                            mov     bl,10
   456 00000324 F6F3                            div     bl      ;; puts ax/10 in al, remainder in ah
   457 00000326 80C430                          add     ah,'0'
   458 00000329 0430                            add     al,'0'
   459 0000032B A2[09000000]                    mov     BYTE [col],al
   460 00000330 8825[0A000000]                  mov     BYTE [col+1],ah
   461                                  
   462                                          ;;;;; now print the set cursor codes
   463 00000336 B804000000                      mov     eax,4
   464 0000033B BB01000000                      mov     ebx,1
   465 00000340 B9[04000000]                    mov     ecx,pos
   466 00000345 BA08000000                      mov     edx,8
   467 0000034A CD80                            int     80h
   468                                  
   469 0000034C 61                              popa
   470 0000034D C3                              ret
   471                                  
   472                                  ;;;;;;;;;;;;;  Function to sleep 1/20 second ;;;;;;;;;;;;;;;;;;;;;
   473                                  _pause: 
   474 0000034E 60                      	pusha
   475 0000034F B8A2000000              	mov	eax,162
   476 00000354 BB[62030000]            	mov	ebx,seconds
   477 00000359 B900000000              	mov	ecx,0
   478 0000035E CD80                    	int	80h
   479 00000360 61                      	popa
   480 00000361 C3                      	ret
   481                                  
   482                                  ;;;;;;;;;;;;	Tricky use of ram.... put some data here for _pause to use
   483 00000362 000000000065CD1D        seconds: dd	0,500000000  ;;;  seconds, nanoseconds
   484                                  
   485                                  
